/*
里面有一大丢的函数模板

c++语言的核心优势之一就是便于软件的重用
c++中有两个方面体现重用:
     1.面向对象的思想:继承和多态,标准类库
	 2.泛型程序设计的思想:模板机制，以及标准模板库STL
*/
/*
c++将一些常用的数据结构(比如链表，数组，二叉树)写成了类模板
把常用的算法(比如排序，查找)写成了函数模板,以后则不论数据结构里
放的是什么对象，算符针对什么样的对象，则都不必重新实现数据结构
重新编写算法

标准模板库(Standdard Template Library)就是一些常用数据结构和算法的模板的
集合
有了STL，不必再写大多的标准数据结构和算法
并且可获得非常高的性能
*/
/*
STL中的基本概念

容器:可容纳各种数据类型的通用数据结构，是类模板
迭代器:可用于依次存取容器中元素，类似指针
算法:用来操作容器中的函数模板{     
    sort()来对一个vector中的数据进行排序
	find()来搜索一个list中的对象----哈哈这个list就是个链表啦，双向链表
}
算法本身与他们操作的数据的类型无关，因此他们可以
在从简单数组到搞复杂容器的任何数据结构上使用
*/
/*
int array[100];
该数组就是容器，而int*类型指针变量就可以作为迭代器，sort算法
可以作用于该容器上，对其进行排序

sort (array,array+70)；将前70个元素进行排序
        |      |
		|      |
     迭代器  迭代器
*/
/*
容器概念
可以用来存放各种类型的数据(基本类型的变量，对象等)的数据结构，
都是类模板，分为三种
1.顺序容器
  vector（动态的一维数组），deque（双向队列），list（双向链表）
2.关联容器
  set，mulset，map，multimap
3.容器适配器
  stack（栈），queue（优先级队列），priority_queue
*/
/*
对象被插入容器中时，被插入的是对象的一个复制品。许多算法，比如排序，查找，要求
对容器中的元素进行比较，有的容器本身就是品牌徐，所以，放入容器的对象所属的类往往
还应该重载==和<运算符
*/
/*
顺序容器简介
容器并非排序的，元素的插入位置同元素的值无关
有vector，deque，list三种
vector 头文件<vector>
  动态数组，元素在内存连续存放。随机存取任何元素都能在常熟时间内完成。在尾端增删
  元素具有较佳的性能(大部分是在常数时间完成)
  但是在中间增加，或者删除的时间复杂度都是O(n)的*/
/*
  我们不但要了解这些容器和算法
  还应该了解各个算法的时间和空间复杂度
*/
/*
deque  头文件<deque>
双向队列.元素在内存连续存放。随机存取任何元素都能够在常数时间完成(但仅次于vector)在两端
增删元素的时候具有较佳的性能
*/
/*
list 头文件<list>
双向链表。元素在内存不连续存放。在任何位置增删元素都能在常数时间完成。不支持随机存取
*/
/*
关联容器简介
元素是排序的
插入任何元素，都按相应的排序规则确定其位置
在查找时具有非常好的性能
通常以平衡二叉树的方式实现，插入和检索时间是O（log(N)）
set/multiset    头文件<set>
set即集合  。set中不允许相同的元素。mulyiset中允许存在相同的元素
map/multimap
map里面只能放对象，并且这个对象只能有两个成员变量，一个叫做firest一个叫做second
map是根据first的值来对元素进行从小到大的排序
并且可以快速地根据first来检索元素
*/

/*
容器适配器
stack:头文件<stack>
栈。是想的有限序列，并且满足序列中被删除，检索和修改的项只能是最近
插入序列的向（栈顶的项）。后进先出。


queue头文件<queue>
队列。插入只可以在尾部进行
删除，检索和修改只允许从头部进行，先进先出

priorty_queue<queue>
优先级队列。最高优先级元素总是第一个出列。
*/

/*
顺序容器和关联容器都有的成员函数
begin 返回指向容器中第一个元素的迭代器
end 返回指向容器中最后一个元素后面位置的迭代器
rbegin返回指向容器中最后一个元素的迭代器
rend 换回指向容器中第一个元素前面位置的迭代器
erase 从容器中删除一个或者几个元素
clear 从容器中删除所有的元素

顺序容器还有的
font:返回容器中第一个元素的引用
back:换回容器中最后一个元素的引用
push_back：在容器末尾增加新元素
pop_back:删除容器末尾的元素
erase:删除迭代器指向的元素()或删除一个区间
返回被删除元素后面的那个元素的迭代器
*/






























